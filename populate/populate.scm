(import chicken.format)
(import chicken.random)
(import srfi-42)
(import srfi-1)

(define-constant WIDTH 800)
(define-constant HEIGHT 600)
(define-constant WDIVS 8)
(define-constant HDIVS 6)
(define-constant ENTS-PER-SQUARE 3)

(define (square-entries xmin xmax ymin ymax nents)
  (let loop ((n 0) (ret '()))
    (if (>= n nents)
        ret
        (let ((x (+ (pseudo-random-integer (- xmax xmin)) xmin))
              (y (+ (pseudo-random-integer (- ymax ymin)) ymin)))
          (if (lset<= equal? `((,x . ,y)) ret)
              (loop n ret)
              (loop (add1 n) (lset-adjoin equal? ret `(,x . ,y))))))))

(define (main)
  (let* ((W2 (/ WIDTH 2))
         (P1x (pseudo-random-integer W2))
         (P2x (+ (pseudo-random-integer W2) W2))
         (P1y (pseudo-random-integer HEIGHT))
         (P2y (pseudo-random-integer HEIGHT))
         (ents (list-ec (:range w WDIVS)
                        (:range h HDIVS)
                        (square-entries (* w (/ WIDTH WDIVS))
                                        (* (add1 w) (/ WIDTH WDIVS))
                                        (* h (/ HEIGHT HDIVS))
                                        (* (add1 h) (/ HEIGHT HDIVS))
                                        ENTS-PER-SQUARE))))
    (for-each print ents)))

(main)
